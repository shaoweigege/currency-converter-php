<?php

/** Visit: https://github.com/jeanvcastro/currency-converter-php */

/** This project implements a simple function to convert currencies 
 * using open APIs that do not require access keys 
 */

namespace App;

class CurrencyConverter
{
    /** APIs available to get currency */
    private static $available_apis;
    /** array to store APIS errors */
    private static $api_errors;
    /** API URL to be used */
    private static $URL;

    private static $from; // base currency
    private static $to; // currency in which it will be converted
    private static $amount; // value to be converted
    private static $api; // API that will convert the value

    /** 
     * This method defines the url of the selected API in the 'URL' variable
     */
    private static function setApisConfigs(){
        switch (static::$api) {
            case 'ratesapi':
            static::$URL = 'https://ratesapi.io/api/latest?base=' . static::$from . '&symbols=' . static::$to;
            break;
            case 'exchangeratesapi':
            static::$URL = 'https://api.exchangeratesapi.io/latest?base=' . static::$from . '&symbols=' . static::$to;
            break;    
            case 'currencyconverterapi':
            static::$URL = 'http://free.currencyconverterapi.com/api/v5/convert?q=' . static::$from . '_' . static::$to . '&compact=y';
            break;
        }
    }

    /** function for the treatment of the specific API response that will be used */
    private static function formatResult($result){
        switch (static::$api) {
            case 'ratesapi':
                return floatval($result['rates'][static::$to] * static::$amount);
            case 'exchangeratesapi':
                return floatval($result['rates'][static::$to] * static::$amount);
            case 'currencyconverterapi':
                return floatval($result[static::$from . '_' . static::$to]['val'] * static::$amount);
        }
    }

    /** 'options' are some settings that can be passed to the function */
    public static function convert($options = [])
    {
        /** initialize variables */
        static::$available_apis = ['ratesapi', 'exchangeratesapi', 'currencyconverterapi'];
        static::$api_errors = [];
        static::$URL = '';

        /** if the values are not passed in the 'options' parameter
         * the function will assume these default values
         */
        static::$from = isset($options['from']) ? $options['from'] : 'USD';
        static::$to = isset($options['to']) ? $options['to'] : 'BRL';
        static::$amount = isset($options['amount']) ? $options['amount'] : 1;
        static::$api = isset($options['api']) ? $options['api'] : static::$available_apis[0];
        /** note that if the 'api' property is not passed in the 'options'
         * parameter, the first api of the 'available_apis' array will be
         * used as the default 
         */

        /** Avoid requesting the APIs if the base currency is the same as the target currency */
        if(static::$from == static::$to){
            return floatval(static::$amount);
        }

        /** Configure the API request for the first time */
        static::setApisConfigs();

        /** As long as APIs are available, make requests until you find the 
         * correct answer. Otherwise it returns an array with the corresponding 
         * errors of each API.
         */
        while(count(static::$available_apis)){
            try{
                //Makes the request to the selected API
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, static::$URL);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                $result = curl_exec($ch);
                curl_close($ch);
                $result = json_decode($result, true);
                if(is_null($result)){
                    throw new \Exception();
                }
                return static::formatResult($result); // handles the result according to the selected API
            }catch(\Exception $e){
                /** registers in the array 'apis_errors' the error generated by the conversion API */
                    static::$api_errors[static::$api] = $e->getMessage();
                    /** removes the API that generated the array error from available APIs */
                    static::$available_apis = array_diff(static::$available_apis, [static::$api]);
                    /** if there are still available APIs, restart the process using the next available API */
                    if(count(static::$available_apis)){
                        static::$api = array_values(static::$available_apis)[0];
                        static::setApisConfigs();
                    }
            }
        }
        /** otherwise, return the errors stored in the array 'api_errors' */
        return static::$api_errors;
    }
}
